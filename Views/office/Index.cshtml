@*@model IEnumerable<WFPtest.Models.Country_office>*@

@using Microsoft.AspNet.Identity
@if (!Request.IsAuthenticated)
{
    Response.Redirect("/RBC-SMS/account/login");
}

@model PagedList.IPagedList<WFPtest.Models.Country_office >
@using WFPtest.Models


@using PagedList.Mvc;
@using JQueryUIHelpers;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
@{
    ViewBag.Title = "Index";
}
@using (Html.BeginForm("Index", "office", FormMethod.Get))
{


    <br>
   
<h2>Office List</h2>
<p>
    Find by  DESCRIPTION  Or  ABREVIATION Or Country: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
    <input type="submit" value="Search" />&nbsp;&nbsp;@Html.ActionLink("Reset Filter", "Index")
</p>
}
 
<table class="table">
    <tr>
        @*<th>
            @Html.DisplayName("office code")
        </th>*@
        <th>
            @Html.ActionLink("english description (Sort)", "Index", new { sortOrder = ViewBag.DateSortParm })
            @*@Html.DisplayName("english description")*@
        </th>
        <th>
            @Html.ActionLink("english abreviation (Sort)", "Index", new { sortOrder = ViewBag.DateSortParm })
            @*@Html.DisplayName("english abreviation")*@
        </th>
        <th>
            @Html.DisplayName("french description")
        </th>
        <th>
            @Html.DisplayName("french abreviation")
        </th>
        <th>
            @Html.DisplayName("status")
        </th>
      
        <th>
            @Html.DisplayName("country")
        </th>

        @*<th>
            @Html.DisplayNameFor(model => model.office_created_by)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.office_created_datetime)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.office_last_modified_by)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.office_last_modified_datetime)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.office_deleted_by)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.office_deleted_datetime)
        </th>*@

        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        @*<td>
            @Html.DisplayFor(modelItem => item.office_id)
        </td>*@
        <td>
            @Html.DisplayFor(modelItem => item.office_description_english)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.office_abreviation_english)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.office_description_french)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.office_abreviation_french)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.office_status)
        </td>
      
        <td>
            @Html.DisplayFor(modelItem => item.country.country_name)
        </td>

        @*<td>
            @Html.DisplayFor(modelItem => item.office_created_by)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.office_created_datetime)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.office_last_modified_by)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.office_last_modified_datetime)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.office_deleted_by)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.office_deleted_datetime)
        </td>*@

        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.countryofficeid }) |
            @Html.ActionLink("Details", "Details", new { id=item.countryofficeid }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.countryofficeid })
        </td>
    </tr>
}

</table>
<table>
    <tr>
        <td>
            <p>
                @Html.ActionLink("Create New", "Create")
            </p>
        </td>
    </tr>
</table>
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))