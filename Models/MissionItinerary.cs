//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WFPtest.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Web.Mvc;
    
    public partial class MissionItinerary
    {
        public int ID { get; set; }
        public Nullable<int> MissionID { get; set; }


        public string Description { get; set; }
        public Nullable<int> FromID { get; set; }

        [Required(ErrorMessage = "this field is mandatory")]
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:dd/MMM/yyyy}", ApplyFormatInEditMode = true)]
        public Nullable<System.DateTime> FromDate { get; set; }

        public Nullable<int> ToID { get; set; }

        [Required(ErrorMessage = "this field is mandatory")]
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:dd/MMM/yyyy}", ApplyFormatInEditMode = true)]
        [GenericCompare(CompareToPropertyName = "FromDate", OperatorName = GenericCompareOperator.GreaterThanOrEqual)]
        public Nullable<System.DateTime> ToDate { get; set; }
        public enum GenericCompareOperator
        {
            GreaterThan,
            GreaterThanOrEqual,
            LessThan,
            LessThanOrEqual
        }
        public sealed class GenericCompareAttribute : ValidationAttribute, IClientValidatable
        {
            private GenericCompareOperator operatorname = GenericCompareOperator.GreaterThanOrEqual;

            public string CompareToPropertyName { get; set; }
            public GenericCompareOperator OperatorName { get { return operatorname; } set { operatorname = value; } }

            public GenericCompareAttribute() : base() { }

            protected override ValidationResult IsValid(object value, ValidationContext validationContext)
            {
                string operstring = (OperatorName == GenericCompareOperator.GreaterThan ? "greater than " : (OperatorName == GenericCompareOperator.GreaterThanOrEqual ? "greater than or equal to " : (OperatorName == GenericCompareOperator.LessThan ? "less than " : (OperatorName == GenericCompareOperator.LessThanOrEqual ? "less than or equal to " : ""))));
                var basePropertyInfo = validationContext.ObjectType.GetProperty(CompareToPropertyName);

                var valOther = (IComparable)basePropertyInfo.GetValue(validationContext.ObjectInstance, null);

                var valThis = (IComparable)value;

                if ((operatorname == GenericCompareOperator.GreaterThan && valThis.CompareTo(valOther) <= 0) ||
                    (operatorname == GenericCompareOperator.GreaterThanOrEqual && valThis.CompareTo(valOther) < 0) ||
                    (operatorname == GenericCompareOperator.LessThan && valThis.CompareTo(valOther) >= 0) ||
                    (operatorname == GenericCompareOperator.LessThanOrEqual && valThis.CompareTo(valOther) > 0))
                    return new ValidationResult(base.ErrorMessage);
                return null;
            }
            #region IClientValidatable Members

            public IEnumerable<ModelClientValidationRule> GetClientValidationRules(ModelMetadata metadata, ControllerContext context)
            {
                string errorMessage = this.FormatErrorMessage(metadata.DisplayName);
                ModelClientValidationRule compareRule = new ModelClientValidationRule();
                compareRule.ErrorMessage = errorMessage;
                compareRule.ValidationType = "genericcompare";
                compareRule.ValidationParameters.Add("comparetopropertyname", CompareToPropertyName);
                compareRule.ValidationParameters.Add("operatorname", OperatorName.ToString());
                yield return compareRule;
            }

            #endregion

        }



        public string non1 { get; set; }
        public Nullable<System.DateTime> non2 { get; set; }
        public Nullable<int> non3 { get; set; }
        public Nullable<bool> non4 { get; set; }

        [Required(ErrorMessage = "this field is mandatory")]
        [DataType(DataType.Time)]
        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:HH:mm}")]
        public Nullable<System.DateTime> Fromtime { get; set; }

        [Required(ErrorMessage = "this field is mandatory")]
        [DataType(DataType.Time)]
        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:HH:mm}")]
        public Nullable<System.DateTime> Totime { get; set; }

         [Required(ErrorMessage = "this field is mandatory")]
        public string Twon1 { get; set; }

         [Required(ErrorMessage = "this field is mandatory")]
        public string Twon2 { get; set; }

        public virtual country country { get; set; }
        public virtual country country1 { get; set; }
        public virtual MissionAuthorization MissionAuthorization { get; set; }
    }
}
