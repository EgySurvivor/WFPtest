//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WFPtest.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Web.Mvc;


    public partial class request
    {
        public int request_no { get; set; }
        public string Output { get; set; }
        public string first_name { get; set; }
        [Required(ErrorMessage = "Field is Mandatory")]
        public string last_name { get; set; }
        [Required(ErrorMessage = "Field is Mandatory")]
        public Nullable<int> job_title { get; set; }
        [Required(ErrorMessage = "Field is Mandatory")]
        public Nullable<int> unit { get; set; }
        [Required(ErrorMessage = "Field is Mandatory")]
        public string budget_code { get; set; }
        [Required(ErrorMessage = "Field is Mandatory")]
        public string index_number { get; set; }
        [Required(ErrorMessage = "Field is Mandatory")]
        public string duty_station { get; set; }
        [Required(ErrorMessage = "Field is Mandatory")]
        public int supervisor_email { get; set; }

        public string appointment_type { get; set; }
        [Required(ErrorMessage = "Field is Mandatory")]

        public Nullable<System.DateTime> start_date { get; set; }
        [Required(ErrorMessage = "Field is Mandatory")]


        [GenericCompare(CompareToPropertyName = "start_date", OperatorName = GenericCompareOperator.GreaterThanOrEqual)]
        public Nullable<System.DateTime> end_date { get; set; }
        public enum GenericCompareOperator
        {
            GreaterThan,
            GreaterThanOrEqual,
            LessThan,
            LessThanOrEqual
        }
        public sealed class GenericCompareAttribute : ValidationAttribute, IClientValidatable
        {
            private GenericCompareOperator operatorname = GenericCompareOperator.GreaterThanOrEqual;

            public string CompareToPropertyName { get; set; }
            public GenericCompareOperator OperatorName { get { return operatorname; } set { operatorname = value; } }

            public GenericCompareAttribute() : base() { }

            protected override ValidationResult IsValid(object value, ValidationContext validationContext)
            {
                string operstring = (OperatorName == GenericCompareOperator.GreaterThan ? "greater than " : (OperatorName == GenericCompareOperator.GreaterThanOrEqual ? "greater than or equal to " : (OperatorName == GenericCompareOperator.LessThan ? "less than " : (OperatorName == GenericCompareOperator.LessThanOrEqual ? "less than or equal to " : ""))));
                var basePropertyInfo = validationContext.ObjectType.GetProperty(CompareToPropertyName);

                var valOther = (IComparable)basePropertyInfo.GetValue(validationContext.ObjectInstance, null);

                var valThis = (IComparable)value;

                if ((operatorname == GenericCompareOperator.GreaterThan && valThis.CompareTo(valOther) <= 0) ||
                    (operatorname == GenericCompareOperator.GreaterThanOrEqual && valThis.CompareTo(valOther) < 0) ||
                    (operatorname == GenericCompareOperator.LessThan && valThis.CompareTo(valOther) >= 0) ||
                    (operatorname == GenericCompareOperator.LessThanOrEqual && valThis.CompareTo(valOther) > 0))
                    return new ValidationResult(base.ErrorMessage);
                return null;
            }
            #region IClientValidatable Members

            public IEnumerable<ModelClientValidationRule> GetClientValidationRules(ModelMetadata metadata, ControllerContext context)
            {
                string errorMessage = this.FormatErrorMessage(metadata.DisplayName);
                ModelClientValidationRule compareRule = new ModelClientValidationRule();
                compareRule.ErrorMessage = errorMessage;
                compareRule.ValidationType = "genericcompare";
                compareRule.ValidationParameters.Add("comparetopropertyname", CompareToPropertyName);
                compareRule.ValidationParameters.Add("operatorname", OperatorName.ToString());
                yield return compareRule;
            }

            #endregion

        }


        public Nullable<bool> computerLaptop { get; set; }
        public Nullable<bool> computerDeskyop { get; set; }
        public bool email { get; set; }
        public bool access_P { get; set; }
        public bool telephone { get; set; }
        public bool pincode_ext { get; set; }
        public bool local_sim { get; set; }
        public bool international { get; set; }
        public bool roaming { get; set; }
        public Nullable<bool> SmartPhone { get; set; }
        public Nullable<bool> BasicPhone { get; set; }
        public bool usb_modem { get; set; }
        public bool color_printer { get; set; }
        public string BlackberryService { get; set; }
        public string IphoneService { get; set; }
        public string mobile_phone { get; set; }
        public string other { get; set; }
        public string location { get; set; }
        public Nullable<int> requested_by { get; set; }
    
        public virtual functional_title functional_title { get; set; }
        public virtual staff staff { get; set; }
        public virtual staff staff1 { get; set; }
        public virtual unit unit1 { get; set; }
    }
}
